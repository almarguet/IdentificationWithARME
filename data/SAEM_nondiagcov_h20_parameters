@everywhere include("constant_SAEM.jl")
@everywhere include("packages_SAEM.jl")
t_osmo_on = convert(Array{Float64},CSV.read("t_on.csv",header = false))[1,:]
t_osmo_dur = convert(Array{Float64},CSV.read("t_dur.csv",header = false))[1,:]
m = 3 #number of individual parameters. Here, kp=1 (identifiablitity issues
a_data = Matrix(0.5I,3,3)# a<1 to avoid blow up of parameters
b_data = [log(0.294), log(0.947), log(0.1)]
h_data = 20.
# omega_data = Matrix(0.1I,3,3)
omega_data = [sqrt(0.1) 0. 0.; sqrt(0.05) sqrt(0.05) 0.;sqrt(0.1/3) sqrt(0.1/3) sqrt(0.1/3)]*
    [sqrt(0.1) 0. 0.; sqrt(0.05) sqrt(0.05) 0.;sqrt(0.1/3) sqrt(0.1/3) sqrt(0.1/3)]'
#
a = Matrix(0.2I,3,3)
b = [-2.4, -0.1, -5] # b[1]<>b[3]
h = 50.
omega = 2*omega_data

OmegaT = Array{Float64,2}
noheritability = false
n_subpopulations = 1
############################################
# case de l'arbre plein
complete_tree = 1
n_gene = 7*ones(Int,n_subpopulations)
ancestor_index = [zeros(Int,2^n_gene[1]-1)]
for i = 1:2^(n_gene[1]-1)-1
    ancestor_index[1][2*i:2*i+1] = i*ones(Int,2)
end
for i = 1:n_subpopulations-1
    push!(ancestor_index,ancestor_index[1])
end
###################################################
# Cas de la branche
# complete_tree = 0
# n_gene = 127*ones(Int,n_subpopulations)
# ancestor_index = [vcat(0,1:n_gene[1]-1)]
# for i = 2:n_subpopulations
#     push!(ancestor_index,vcat(0,1:n_gene[1]-1))
# end
###################################################
n = [length(ancestor_index[i]) for i = 1:n_subpopulations]
total_size = sum(n)

#initialisation systeme_densite
initial_densities = [0.,0.]#[m0,p0]
lifetime = 90.
tspan = (0.,lifetime*maximum(n_gene))
tstep = 1.

birth_death_time_meta =  []
for i = 1:n_subpopulations
  birth_death_time = zeros(2,n[i])
  birth_death_time[:,1] = [0,lifetime]
  for k = 2:n[i]
      birth_death_time[:,k] =[birth_death_time[2,ancestor_index[i][k]],birth_death_time[2,ancestor_index[i][k]]+lifetime]
  end
  push!(birth_death_time_meta,birth_death_time)
end
birth_death_time_meta  = convert(Array{Array{Float64,2},1},birth_death_time_meta)


duration = 8.#duration of osmotic choc
waiting = 30. #time between 2 chocs
n_osmo = Int(round(tspan[2]/waiting))
t_osmo = zeros(n_osmo,2)
for i = 1:n_osmo
    t_osmo[i,1] = waiting*i
    t_osmo[i,2] = waiting*i+duration
end


n_time = Int(round((tspan[2]-tspan[1])/tstep+1))
v_time = range(tspan[1],stop = tspan[2],length = n_time)

N = 100 #nombre d'itérations SAEM N>100
N_MCMC = 2
N_opt = 100 # number of iteration for coordinate optimization
N_burn = 10
nMC1 = 10#nombre d'iteration MCMC
nMC2 = 10
nMC3 = 10

s0 = 0.
s1 = zeros(m,m)
s2 = zeros(m,m)
s3 = zeros(m,m)
s4 = zeros(m)
s5 = zeros(m)
s6 = zeros(m,m)
s7 = zeros(m)

# gamma = [1/n for n = 1:N]
gamma = vcat(ones(80),[1/(k-80) for k = 81:N])
# gamma = ones(N)
# gamma = vcat(1,zeros(5)ones(N-6))
dt = 1e-02
sigma = 0.1
sig = [0.1,0.1,0.1,0.1]
sig_tot = 0.1
delta = 0.4
if typeof(a_data) == Float64 && OmegaT == Array{Float64,1} && !noheritability
    lower = [0.,-Inf, -Inf, -Inf, 0., 0., 0., 0.]
    upper = [1., Inf, Inf, Inf, Inf, Inf, Inf, Inf]
elseif OmegaT == Array{Float64,2} && !noheritability && typeof(a_data) == Float64
    lower = [0.,-Inf, -Inf, -Inf, 0., -Inf, 0., -Inf, -Inf, 0., 0.]
    upper = [1., Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf]
elseif OmegaT == Array{Float64,2} && !noheritability && typeof(a_data) == Array{Float64,2}
    lower = [0.,0.,0.,-Inf, -Inf, -Inf, 0., -Inf, 0., -Inf, -Inf, 0., 0.]
    upper = [0.99,0.99,0.99, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf]
elseif OmegaT == Array{Float64,2}
    lower = [-Inf, -Inf, -Inf, 0., -Inf, 0., -Inf, -Inf, 0., 0.]
    upper = [ Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf, Inf]
else
    lower = [0.,0.,0.,-Inf, -Inf, -Inf, 0., 0., 0., 0.]
    upper = [1.,1.,1., Inf, Inf, Inf, Inf, Inf, Inf, Inf]
end
N_init = 100
########################################################################################
k = parse(Int, ARGS[1])
println("k = " * string(k))
# k = 7
#for k = 19:20
 # println(string("iteration ", k))
  #Simulation of data
  meta_data = []
  meta_data = convert(Array{Array{Float64,2},1},meta_data)
  meta_pop_data= Metapopulation(n_subpopulations, n, ancestor_index, a_data, b_data, omega_data, n_time, v_time,
      birth_death_time_meta, m, n_osmo, t_osmo, tau ; index_time=0)
  for i = 1:meta_pop_data.n_subpopulations
      pop = meta_pop_data.subpopulations[i]
      simulation_parameters(pop)
      # initial_densities[2] = meta_data[i][index_time[i][:,1],1][1] #génération des paramètres individuels
      for u = 1:pop.size
          protein_mRNA_density(pop, u)
      end
      bruit = h_data*rand(Normal(),meta_pop_data.n_time,meta_pop_data.subpopulations[i].size)
      push!(meta_data, meta_pop_data.subpopulations[i].protein_density + bruit)
  end
  # meta_data = load("/run/user/1000/gvfs/sftp:host=bastion.inrialpes.fr/home/amarguet/Documents/julia/SAEM/2018-07-25/Final simulations/Adiag/nondiagcov h10/SAEM_nondiagcov_diagA_h10_2.jld")["meta_data"]
################################################################################
  # Use of saved data
  # meta_data = load(string("./Model2/complete_version/Adiag/ngene7/b 1er papier/SAEM_all_ngene7_",k,".jld"))["meta_data"]
  # meta_data = [data]
################################################################################
  # Simulation of a new population for the estimation
  @time begin
      meta_pop = Metapopulation(n_subpopulations, n, ancestor_index, a, b, omega, n_time, v_time,
          birth_death_time_meta, m, n_osmo, t_osmo, tau ; index_time=0)
      for i = 1:meta_pop.n_subpopulations
          simulation_parameters(meta_pop.subpopulations[i]) #génération des paramètres individuels
          for u = 1:meta_pop.subpopulations[i].size
              protein_mRNA_density(meta_pop.subpopulations[i],u)
          end
      end
  end
  # #
  # # Simulation of a new population for the proposal
  meta_pop_prop = Metapopulation(n_subpopulations, n, ancestor_index, a, b, omega, n_time, v_time,
      birth_death_time_meta, m, n_osmo, t_osmo, tau ; index_time=0)
  for i = 1:meta_pop_prop.n_subpopulations
      simulation_parameters(meta_pop_prop.subpopulations[i]) #génération des paramètres individuels
      for u = 1:meta_pop_prop.subpopulations[i].size
          protein_mRNA_density(meta_pop_prop.subpopulations[i], u)
      end
  end

  # for i = 1:meta_pop_data.n_subpopulations
  #     first_initialization(meta_pop.subpopulations[i],meta_data[i],h)
  # end

  heritability, global_mean,global_covariance, h_sequence, FI, loglik = SAEM_all_h_FI(OmegaT, meta_data,
  meta_pop, meta_pop_prop, t_osmo, dt, h, N_burn, nMC1, nMC2, nMC3,
  complete_tree, N, lower,upper, gamma, s0, s1, s2, s3, s4, s5, s6, s7, sig, delta; direct=true)
  individual_parameters_estimated = []
  individual_parameters_data = []
  for i = 1:meta_pop_prop.n_subpopulations
      push!(individual_parameters_estimated, meta_pop.subpopulations[i].individual_parameters)
      push!(individual_parameters_data, meta_pop_data.subpopulations[i].individual_parameters)
  end
  save(string("SAEM_nondiagcov_diagA_h20_",k,".jld"), "individual_parameters_estimated", individual_parameters_estimated,
    "individual_parameters_data", individual_parameters_data, "meta_data", meta_data,
      "h", h_sequence, "heritability", heritability, "mean", global_mean, "omega", global_covariance, "loglik", loglik, "FI", FI)
# end

